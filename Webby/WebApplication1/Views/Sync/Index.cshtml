<body>
    <!-- Main Content -->
    <div class="container">
        <div class="row">
            <div class="col-md-8" id="diviFramePart">
                <div id="player"></div>
            </div>
            <div class="col-md-4">
                <div id="divUrlList">
                    <div class="row scrollList" id="searchResults">
                        <ul class="list-group" id="urlListUL">
                            @foreach (var item in Json.Decode(Model.jSonList))
                            {
                                if (item.UrlPart != Model.UrlCurrent)
                                {
                                    <li id="@item.UrlPart" class="list-group-item urlli"  >
                                        <div class="relevance">
                                            @item.Title
                                            <div class="glyphicon glyphicon-remove urldiv hidden" id="deleteUrl" />
                                        </div>
                                    </li>
                                }
                                else
                                {
                                    <li id="@item.UrlPart" class="list-group-item urlli active">
                                        <div class="relevance">
                                            @item.Title
                                            <div class="glyphicon glyphicon-remove urldiv" id="deleteUrl" />
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-8">
                <div>
                    <div class="urlinputdiv">
                        <input class="form-control urlinput" type="text" id="url" />
                    </div>
                    <input class="btn btn-default mainbtn" type="button" id="addurl" value="Add url" />
                    <input class="btn btn-default mainbtn" type="button" id="nexturl" value="Next url" />
                    <input class="btn btn-default mainbtn" type="button" id="shuffleurl" value="Shuffle" />
                </div>
            </div>
            <div class="col-md-4">
                <input class="form-control fuzzyinput" type="text" id="fuzzysearch" />
            </div>
        </div>
        <div class="row">
        </div>
    </div>
    <hr>
</body>
@section scripts {
    <script>
        /** Init Vars from Model here ( Only from first page load).  **/
        var GlobalRowV = "@Model.RowVersion";
        var CurrentUrl = "@Model.UrlCurrent";
        var CurrentTime = "@Model.CurrentTime";
        var JsonUrlList = $.parseJSON(@Html.Raw(Json.Encode(Model.jSonList)));
        var GlobalResults;
        var testElems;

        var player;//The Youtube player 
        var syncer = $.connection.syncHub;//The WebSocket.
        var options = {
            keys: ['Title'],   // keys to search in
            id: 'UrlPart'     // return a list of identifiers only
        }

        $(function () {
            // CLIENT SIDE FUNCTIONS (USED BY HUB)
            syncer.client.addUrl = function (url, title) {
                $('#urlListUL').append('<li id="' + url + '"class="list-group-item urlli"><div class="relevance">' + title + '<div class="glyphicon glyphicon-remove urldiv hidden" id="deleteUrl" /></div></li>');
            };

            syncer.client.addUrlEx = function () {
                $('#url').val('BAD FORMAT');
            };

            syncer.client.nextUrl = function (returnUrl) {
                CurrentUrl = returnUrl;
                syncUrlList(CurrentUrl);

                player.stopVideo();
                player.loadVideoById(CurrentUrl);
                scrollToUrl(CurrentUrl);
            };

            syncer.client.goToTime = function (time, version) {
                GlobalRowV = version;
                CurrentTime = time;
                player.seekTo(parseFloat(CurrentTime));
            };

            syncer.client.goToUrl = function (returnUrl) {
                CurrentUrl = returnUrl;
                syncUrlList(CurrentUrl);
                player.stopVideo();
                player.loadVideoById(CurrentUrl);
                scrollToUrl(CurrentUrl);
            };

            syncer.client.afterDelete = function (returnUrl, deleteThis) {
                $('#' + deleteThis).remove();
                CurrentUrl = returnUrl;
                var self = $("#" + CurrentUrl);
                self.siblings().removeClass('active');
                self.addClass('active');
                self.siblings().find('#deleteUrl').addClass('hidden');
                self.find("#deleteUrl").removeClass('hidden');

                player.stopVideo();
                player.loadVideoById(CurrentUrl);
                scrollToUrl(CurrentUrl);
            }

            // Start the connection.
            $.connection.hub.start().done(function () {
                //Bindklick events after the Websocket is open. to ensure response.
                $('#addurl').click(function () {
                    var inputUrl = $('#url').val();
                    if (inputUrl.length > 11) {
                        var video_id = inputUrl.match(/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&amp;]v=)|youtu\.be\/)([^""&amp;?\/ ]{11})/);
                        callJewApi(video_id);
                    }
                    else if (inputUrl.length === 11) {
                        var video_id = inputUrl.match(/([a-zA-Z0-9_-]{11})/);
                        callJewApi(video_id);
                    }
                    else {
                        $('#url').val('BAD FORMAT');
                    }
                });

                $('#nexturl').click(function () {
                    syncer.server.nextUrl();
                });

                $('#shuffleurl').click(function () {
                    syncer.server.shuffleUrl();
                });
                
                $('#urlListUL').on('click', '#deleteUrl', function () {
                    syncer.server.deleteUrl(CurrentUrl);
                });

                $('#urlListUL').on('click', 'li', function () {
                    var self = $(this);
                    if (CurrentUrl !== self.attr("id")){
                        syncer.server.goToUrl(self.attr("id"));
                    }
                });

                $("#fuzzysearch").keyup(function () {
                    var i, len, title, urls, query, relevance, ra, rb, elems, obj, results;
                    query = $("#fuzzysearch").val();
                    urls = JsonUrlList;
                    results = [];
                    
                    for (i = 0, len = urls.length; i < len; i++) {
                        title = urls[i].Title;
                        relevance = string_similarity(query, title);
                        //populate relevace in .relevance div on ID

                        $("#" + urls[i].UrlPart + "> .relevance").attr('id', relevance.toFixed(2));
                    }


                    elems = $('#urlListUL').children('li');
                    //function cmp(a, b) { return a == b ? 0 : a < b ? -1 : 1; }
                    elems.sort(function (a, b) {
                        ra = $("#urlListUL >#" + a.id + "> .relevance").attr("id");
                        rb = $("#urlListUL >#" + b.id + "> .relevance").attr("id");
                        return ra - rb;//cmp(parseFloat(ra), parseFloat(rb));
                    });
                    elems = elems.get().reverse();
                    $('#urlListUL').html(elems);
                    scrollToUrl(elems[0].id);
                });
            });
        });

        /**** YOUTUBE FUNCTIONS ****/
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '400',
                width: '640',
                videoId: CurrentUrl,
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        function onPlayerReady(event) {
            event.target.playVideo();
            player.seekTo(parseFloat(CurrentTime));
            scrollToUrl(CurrentUrl);
        }

        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.ENDED) {
                syncer.server.nextUrl();
            }
            if (event.data == YT.PlayerState.PLAYING) {
                syncer.server.goToTime(player.getCurrentTime(), GlobalRowV);
            }
        }

        /*********************** Load JewTube APi *******************************/
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        /** Helper Functions **/
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        function syncUrlList(url){
            var self = $("#" + url);
            self.siblings().removeClass('active');
            self.addClass('active');
            self.siblings().find('#deleteUrl').addClass('hidden');
            self.find("#deleteUrl").removeClass('hidden');
        }

        function scrollToUrl(url) {
            $('div.scrollList').scrollTo($('div li:eq(' + $('#' + url).index() + ')'), 800);
        }
        //** Take regex match and run it towards youtubeAPi to extract title and validate id  **//
        function callJewApi(video_id) {
            if (video_id != null) {
                video_id = video_id[1];
                $.getJSON('http://gdata.youtube.com/feeds/api/videos/' + video_id + '?v=2&alt=jsonc', function () {
                }).success(function (data, status, xhr) {
                    syncer.server.addUrl(data.data.id, data.data.title);
                    $('#url').val('');
                })
                .error(function () {
                    $('#url').val('BAD FORMAT');
                });
            } else {
                $('#url').val('BAD FORMAT');
            }
        }

        ///////////////// SORTING LAND
        var get_bigrams, string_similarity;

        get_bigrams = function (string) {
            var i, j, ref, s, v;
            s = string.toLowerCase();
            v = new Array(s.length - 1);
            for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {
                v[i] = s.slice(i, i + 2);
            }
            return v;
        };

        string_similarity = function (str1, str2) {
            var hit_count, j, k, len, len1, pairs1, pairs2, union, x, y;
            if (str1.length > 0 && str2.length > 0) {
                pairs1 = get_bigrams(str1);
                pairs2 = get_bigrams(str2);
                union = pairs1.length + pairs2.length;
                hit_count = 0;
                for (j = 0, len = pairs1.length; j < len; j++) {
                    x = pairs1[j];
                    for (k = 0, len1 = pairs2.length; k < len1; k++) {
                        y = pairs2[k];
                        if (x === y) {
                            hit_count++;
                        }
                    }
                }
                if (hit_count > 0) {
                    return (2.0 * hit_count) / union;
                }
            }
            return 0.0;
        };
</script>
}
