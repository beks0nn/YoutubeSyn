<body>
    <!-- Main Content -->
    <div class="container">
        <div class="row">
            <div class="col-md-8" id="diviFramePart">
                <div id="player"></div>
            </div>
            <div class="col-md-4">
                <div id="divUrlList">
                    <div class="row scrollList" id="searchResults">
                        <ul class="list-group" id="urlListUL">
                            @foreach (var item in Model.UrlList)
                            {
                                if (item.UrlPart != Model.UrlCurrent)
                                {
                                    <li id="@item.UrlPart" class="list-group-item urlli">
                                        @item.UrlPart
                                        <div class="glyphicon glyphicon-remove urldiv hidden" id="deleteUrl" />
                                    </li>
                                }
                                else
                                {
                                    <li id="@item.UrlPart" class="list-group-item urlli active">
                                        @item.UrlPart
                                        <div class="glyphicon glyphicon-remove urldiv" id="deleteUrl" />
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-8">
                <div>
                    <div class="urlinputdiv">
                        <input class="form-control urlinput" type="text" id="url" />
                    </div>
                    <input class="btn btn-default mainbtn" type="button" id="addurl" value="Add url" />
                    <input class="btn btn-default mainbtn" type="button" id="nexturl" value="Next url" />
                    <input class="btn btn-default mainbtn" type="button" id="shuffleurl" value="Shuffle" />
                </div>
            </div>
        </div>

        <div class="row">
        </div>
    </div>
    <hr>
</body>
@section scripts {
    <script>
        /** Init Vars from Model here ( Only from first page load).  **/
        var GlobalRowV = "@Model.RowVersion";
        var CurrentUrl = "@Model.UrlCurrent";
        var CurrentTime = "@Model.CurrentTime";

        var player;//The Youtube player 
        var syncer = $.connection.syncHub;//The WebSocket.
       

        $(function () {
            // CLIENT SIDE FUNCTIONS (USED BY HUB)
            syncer.client.addUrl = function (url) {
                $('#urlListUL').append('<li id="' + url + '"class="list-group-item urlli">' + htmlEncode(url) + '<div class="glyphicon glyphicon-remove urldiv hidden" id="deleteUrl" /></li>');
            };

            syncer.client.addUrlEx = function () {
                $('#url').val('BAD FORMAT');
            };

            syncer.client.nextUrl = function (returnUrl) {
                CurrentUrl = returnUrl;
                syncUrlList(CurrentUrl);

                player.stopVideo();
                player.loadVideoById(CurrentUrl);
            };

            syncer.client.goToTime = function (time, version) {
                GlobalRowV = version;
                player.seekTo(time);
            };

            syncer.client.goToUrl = function (returnUrl) {
                CurrentUrl = returnUrl;
                syncUrlList(CurrentUrl);
                player.stopVideo();
                player.loadVideoById(CurrentUrl);
            };

            syncer.client.afterDelete = function (returnUrl, deleteThis) {
                $('#' + deleteThis).remove();
                CurrentUrl = returnUrl;
                var self = $("#" + CurrentUrl);
                self.siblings().removeClass('active');
                self.addClass('active');
                self.siblings().find('div').addClass('hidden');
                self.find("div").removeClass('hidden');

                player.stopVideo();
                player.loadVideoById(CurrentUrl);
            }

            // Start the connection.
            $.connection.hub.start().done(function () {
                //Bindklick events after the Websocket is open. to ensure response.
                $('#addurl').click(function () {
                    if ($('#url').val().length !== 0) {
                        syncer.server.addUrl($('#url').val());
                        $('#url').val('');
                    }
                });

                $('#nexturl').click(function () {
                    syncer.server.nextUrl();
                });

                $('#shuffleurl').click(function () {
                    syncer.server.shuffleUrl();
                });
                
                $('#urlListUL').on('click', 'div', function () {
                    syncer.server.deleteUrl(CurrentUrl);
                });

                $('#urlListUL').on('click', 'li', function () {
                    var self = $(this);
                    if (CurrentUrl !== self.attr("id")){
                        syncer.server.goToUrl(self.attr("id"));
                    }
                });
            });
        });

        /**** YOUTUBE FUNCTIONS ****/
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '400',
                width: '640',
                videoId: CurrentUrl,
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        function onPlayerReady(event) {
            event.target.playVideo();
            player.seekTo(CurrentTime);
        }

        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.ENDED) {
                syncer.server.nextUrl();
            }
            if (event.data == YT.PlayerState.PLAYING) {
                //player.getVideoData().title;
                syncer.server.goToTime(player.getCurrentTime(), GlobalRowV);
            }
        }

        /*********************** Load JewTube APi *******************************/
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        /** Helper Functions **/
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        function syncUrlList(url){
            var self = $("#" + url);
            self.siblings().removeClass('active');
            self.addClass('active');
            self.siblings().find('div').addClass('hidden');
            self.find("div").removeClass('hidden');
        }
</script>
}
