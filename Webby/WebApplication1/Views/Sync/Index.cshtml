<!-- Main Content -->
<div class="container">
    <div class="row">
        <div class="col-md-8" id="diviFramePart">
            <div class="embed-responsive embed-responsive-16by9">
                <div id="player"></div>
            </div>
        </div>
        <div class="col-md-4 mainLi">
            <div id="divUrlList">
                <div class="row scrollList" id="searchResults">
                    <ul class="list-group" id="urlListUL">
                        @foreach (var item in Json.Decode(Model.jSonList))
                        {
                            <li id="@item.UrlPart" class="list-group-item urlli@(item.UrlPart != Model.UrlCurrent ? "" : " active")" data-relevance="0">
                                @item.Title
                                <div class="glyphicon glyphicon-remove deleteUrl urldiv redActive @(item.UrlPart != Model.UrlCurrent ? "hidden " : "")"></div>
                                <div class="glyphicon glyphicon-refresh urldiv repeatUrl @(item.UrlPart != Model.UrlCurrent ? "hidden " : "")@(Model.isRepeat == true ? "cloroedRep" : "")"></div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-8">
            <div>
                <div class="urlinputdiv">
                    <input class="form-control urlinput" type="text" id="url" />
                </div>
                <input class="btn btn-default mainbtn" type="button" id="addurl" value="Add url" />
                <input class="btn btn-default mainbtn" type="button" id="nexturl" value="Next url" />
                <input class="btn btn-default mainbtn @(Model.isShuffle ? "isShuff" : "")" type="button" id="shuffleurl" value="Shuffle" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="right-inner-addon ">
                <i class="glyphicon glyphicon-search"></i>
                <input type="text" class="form-control fuzzyinput" placeholder="Search" id="fuzzysearch" />
            </div>
        </div>
    </div>
    <div class="row">
    </div>
</div>
<hr>


@section scripts {
    <script>
        /** Init Vars from Model here ( Only from page load).  **/
        var GlobalRowV = "@Model.RowVersion";
        var CurrentUrl = "@Model.UrlCurrent";
        var CurrentTime = "@Model.CurrentTime";
        var IsRepeat = $.parseJSON(@Model.isRepeat.ToString().ToLower());
        var IsShuffle = $.parseJSON(@Model.isShuffle.ToString().ToLower());
        var JsonUrlList = $.parseJSON(@(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.jSonList))));

        var player;//The Youtube player
        var syncer = $.connection.syncHub;//The WebSocket.
        var options = {
            keys: ['Title'],   // keys to search in
            id: 'UrlPart'     // return a list of identifiers only
        };

        $(function () {
            // CLIENT SIDE FUNCTIONS (USED BY HUB)
            syncer.client.addUrl = function (url, title) {
                $('#urlListUL').append(makeNewListItem(url, title));
                JsonUrlList.push({
                    UrlPart: url,
                    Title: title
                });
            };

            syncer.client.addUrlEx = function () {
                $('#url').val('BAD FORMAT');
            };

            syncer.client.nextUrl = function (returnUrl) {
                CurrentUrl = returnUrl;
                syncUrlList(CurrentUrl);
                IsRepeat = false;
                player.stopVideo();
                player.loadVideoById(CurrentUrl);
                scrollToUrl(CurrentUrl);
            };

            syncer.client.goToTime = function (time, version) {
                GlobalRowV = version;
                CurrentTime = time;
                player.seekTo(parseFloat(CurrentTime));
            };

            syncer.client.goToUrl = function (returnUrl) {
                CurrentUrl = returnUrl;
                syncUrlList(CurrentUrl);
                IsRepeat = false;
                player.stopVideo();
                player.loadVideoById(CurrentUrl);
                scrollToUrl(CurrentUrl);
            };

            syncer.client.afterDelete = function (returnUrl, deleteThis) {
                $('#' + deleteThis).remove();
                //Delete Json item from search array
                JsonUrlList = $.grep(JsonUrlList, function (e) { return e.UrlPart != deleteThis });

                CurrentUrl = returnUrl;
                syncUrlList(CurrentUrl);
                IsRepeat = false;
                player.stopVideo();
                player.loadVideoById(CurrentUrl);
                scrollToUrl(CurrentUrl);
            };

            syncer.client.setRepeat = function (setBool, setUrl) {
                IsRepeat = setBool;

                if (IsRepeat) {
                    IsShuffle = false;
                    $("#shuffleurl").removeClass("isShuff");
                }

                var self = $("#" + CurrentUrl);
                self.find('.repeatUrl').toggleClass("cloroedRep");
            };

            syncer.client.initShuffleUrl = function (returnUrl, setBool) {
                IsShuffle = setBool;
                $("#shuffleurl").toggleClass("isShuff");

                if (setBool) {
                    CurrentUrl = returnUrl;
                    syncUrlList(CurrentUrl);
                    IsRepeat = false;
                    player.stopVideo();
                    player.loadVideoById(CurrentUrl);
                    scrollToUrl(CurrentUrl);
                }
            };

            // Start the connection.
            $.connection.hub.start().done(function () {
                //Bindklick events after the Websocket is open. to ensure response.
                $('#addurl').click(function () {
                    this.blur();
                    var inputUrl, video_id, regxLong, regxShort;
                    inputUrl = $('#url').val();
                    rx = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|\&v(?:i)?=))([^#\&\?]*).*/;
                    rxs = /([a-zA-Z0-9_-]{11})/;

                    if (inputUrl.length > 11) {
                        video_id = inputUrl.match(rx);
                        callJewApi(video_id);
                    }
                    else if (inputUrl.length === 11) {
                        video_id = inputUrl.match(rxs);
                        callJewApi(video_id);
                    }
                    else {
                        $('#url').val('BAD FORMAT');
                    }
                });

                $('#nexturl').click(function () {
                    this.blur();
                    syncer.server.nextUrl();
                });

                $('#shuffleurl').click(function () {
                    this.blur();
                    syncer.server.initShuffleUrl();
                });

                $('#urlListUL').on('click', '.deleteUrl', function () {
                    syncer.server.deleteUrl(CurrentUrl);
                });

                $('#urlListUL').on('click', '.repeatUrl', function () {
                    if (IsRepeat)
                        syncer.server.setRepeat(CurrentUrl, false);
                    else
                        syncer.server.setRepeat(CurrentUrl, true);
                });

                $('#urlListUL').on('click', 'li', function () {
                    var self = $(this);
                    if (CurrentUrl !== self.attr("id")) {
                        syncer.server.goToUrl(self.attr("id"));
                    }
                });

                $("#fuzzysearch").keyup(function () {
                    var i, len, title, urls, query, relevance, ra, rb, elems, obj, results;
                    query = $("#fuzzysearch").val();
                    if (query.length < 1 || query.length > 19)
                        return;

                    urls = JsonUrlList;

                    //Array of li :s  remove dom objects Weight and sort and then insert into dom.
                    elems = $('#urlListUL').children('li').remove();

                    for (i = 0, len = urls.length; i < len; i++) {
                        title = urls[i].Title;
                        relevance = string_similarity(query, title);
                        //Normalize relevance
                        if (relevance < 0.1)
                            relevance = 0

                        elems.filter("#" + urls[i].UrlPart)[0].dataset.relevance = relevance.toFixed(2);
                    }

                    function cmp(a, b) { return a == b ? 0 : a < b ? 1 : -1; }
                    elems.sort(function (a, b) {
                        //var a = $('#mydiv').data('myval');
                        ra = a.dataset.relevance;
                        rb = b.dataset.relevance;

                        return cmp(parseFloat(ra), parseFloat(rb)); //ra - rb;
                    });

                    $('#urlListUL').html(elems);
                    scrollToUrlFaster(elems[0].id);
                });
            });
        });

        /**** YOUTUBE FUNCTIONS ****/
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '1',
                width: '1',
                videoId: CurrentUrl,
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        };

        function onPlayerReady(event) {
            event.target.playVideo();
            player.seekTo(parseFloat(CurrentTime));
            scrollToUrl(CurrentUrl);
        };

        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.ENDED) {
                if (IsRepeat) {
                    player.seekTo(0);
                }
                else if (IsShuffle) {
                    syncer.server.shuffleUrl();
                }
                else {
                    syncer.server.nextUrl();
                }
            }
            if (event.data == YT.PlayerState.PLAYING) {
                syncer.server.goToTime(player.getCurrentTime(), GlobalRowV);
            }
        };

        /*********************** Load JewTube APi *******************************/
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        /** HELPER LAND **/
        function makeNewListItem(url, title) {
            var data, tpl;
            data = { url: url, title: title };
            tpl = '<li id="{{url}}" class="list-group-item urlli" data-relevance="0">{{title}}<div class="glyphicon glyphicon-remove deleteUrl urldiv redActive hidden"></div><div class="glyphicon glyphicon-refresh repeatUrl urldiv hidden"></div></li>';
            return Mustache.to_html(tpl, data);
        };

        function syncUrlList(url) {
            var self = $("#" + url);
            self.siblings().removeClass('active');
            self.addClass('active');
            self.siblings().find('.deleteUrl').addClass('hidden');
            var repeatUrlDivs = self.siblings().find('.repeatUrl');
            repeatUrlDivs.addClass('hidden');
            repeatUrlDivs.removeClass('cloroedRep');
            self.find(".deleteUrl").removeClass('hidden');
            self.find(".repeatUrl").removeClass('hidden');
        };

        function scrollToUrl(url) {
            $('#' + url).ScrollTo();
        };
        function scrollToUrlFaster(url) {
            $('#' + url).ScrollTo();
        };

        function callJewApi(video_id) {
            if (video_id != null) {
                video_id = video_id[1];
                $.getJSON("https://www.googleapis.com/youtube/v3/videos?id=" + video_id + "&key=AIzaSyDQMjfzyAgCOJ6opn-loMv9_B_ztwZQXG4&fields=items%28id,snippet%28title%29%29&part=snippet", function () {
                }).success(function (data, status, xhr) {
                    syncer.server.addUrl(data.items[0].id, data.items[0].snippet.title);
                    $('#url').val('');
                })
                .error(function () {
                    $('#url').val('error');
                });
            } else {
                $('#url').val('BAD FORMAT');
            }
        };

        /** SORTING LAND **/
        var get_bigrams, string_similarity;

        get_bigrams = function (string) {
            var i, j, ref, s, v;
            s = string.toLowerCase();
            v = new Array(s.length - 1);
            for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {
                v[i] = s.slice(i, i + 2);
            }
            return v;
        };

        string_similarity = function (str1, str2) {
            var hit_count, j, k, len, len1, pairs1, pairs2, union, x, y;
            if (str1.length > 0 && str2.length > 0) {
                pairs1 = get_bigrams(str1);
                pairs2 = get_bigrams(str2);
                union = pairs1.length + pairs2.length;
                hit_count = 0;
                for (j = 0, len = pairs1.length; j < len; j++) {
                    x = pairs1[j];
                    for (k = 0, len1 = pairs2.length; k < len1; k++) {
                        y = pairs2[k];
                        if (x === y) {
                            hit_count++;
                        }
                    }
                }
                if (hit_count > 0) {
                    return (2.0 * hit_count) / union;
                }
            }
            return 0.0;
        };
</script>
}
